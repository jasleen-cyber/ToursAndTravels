starting with express after node farm project
it is abstraction of node js , so help us to write node js code faster and help with complex routing

we will work on project tours


it will help us to learn how to create REST ful APIs

in request and response, 
they are bit different in express than in node
in express they have a lot more data and methods/functions on them




-----------------
express
----------------

routing is feature of the express 


res.send - sends back string to the client
we can do same with
res.json
better for when using postman
Ì€
//res.status(200).send("hello from the server babe")
res.json(200).send("hello from the server babe")
in the above .json sets the content type to json


get all tours
get one tours
post a tour
then add the tour from post in orignal json file


When using the JSON.parse() on a JSON derived from an array, 
the method will return a JavaScript array, 
instead of a JavaScript object.


 const newId = [tours.length - 1].id +1 ;
  // + 1 constant type ko numeric banane k lie 

  const newTour = Object.assign({"id" : newId }, req.body);
  //Object.assign to merge two objects into one
  tours.push(newTour);
  //tours.push : pushes new tour to the array constanr tours , basically adds new tour to the variable

   fs.writeFileSync(`${__dirname}/dev-data/data/tours-simple.json`, JSON.stringify(tours), err =>{
    res.status(201).JSON({
        status : "success",
        tours : newTour
    })
  } )

// replace karra h tours ko tours-simple.json file mai
and uske lie , tours jo ki js object converted to js array h usko wapis JSON.stringify s JSON m convert karne k lie 
and call back function in which it will send and display the new tour in the server.


RESPONSE CODE 
204 means no content
201 means new created
200 success
404 error
500 internal error / not implemented

morgan is a logging tool 

it will display whateve is in request in console

The express.json() function is a built-in middleware in Express that is used for parsing incoming requests with JSON payload.
 The express.json middleware is important for parsing incoming JSON payloads and
  making that data available in the req.body or further processing within the routes. 
  Without using express.json, 
Express will not automatically parse the JSON data in the request body.


route handleres are middlewarees as well
they are middleware that only applies to certain URLs 


routes are also can be called controllers

route('/')  -> this means we are at the root of the URLs


app.use('/api/v1/tours' , tourRouter)
// syntax is app.use((route),(route handler));
// this above is called mounting a router , basically means mounting a router on a route



app.js file after refactoring will be file for middleware declarations








